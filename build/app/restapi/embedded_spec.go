// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Run node in Direktiv",
    "title": "node",
    "version": "1.0",
    "x-direktiv-meta": {
      "categories": [
        "build",
        "development"
      ],
      "container": "gcr.io/direktiv/functions/node",
      "issues": "https://github.com/direktiv-apps/node/issues",
      "license": "[Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)",
      "long-description": "This function provides a Node.js a s a Direktiv function. Node Version Manager is installed to support LTS versions. The following versions are installed in this function:\n\n- 18.10.0\n\n- 16.17.1\n\nNVM (Node Version Manager) can be used as well to install different versions but it is function wide which means changes are visible to all function calls during the function / container lifetime. If the application is returning plain JSON on standard out it will be used as JSON result in Direktiv. If the application prints other strings to standard out the response will be a plain string. If JSON output is required the application can create and write to a file called output.json. If this file exists, this function uses its contents as return value.\nFunctions can have a context to persist the node_modules directory across different execution cycles. Unlike Direktiv's regular behaviour to have a new working directory for each execution, the context ensures that it runs in the same directory each time. ",
      "maintainer": "[direktiv.io](https://www.direktiv.io) ",
      "url": "https://github.com/direktiv-apps/node"
    }
  },
  "paths": {
    "/": {
      "post": {
        "parameters": [
          {
            "type": "string",
            "default": "development",
            "description": "direktiv action id is an UUID. \nFor development it can be set to 'development'\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          },
          {
            "type": "string",
            "default": "/tmp",
            "description": "direktiv temp dir is the working directory for that request\nFor development it can be set to e.g. '/tmp'\n",
            "name": "Direktiv-TempDir",
            "in": "header"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "commands": {
                  "description": "Array of commands.",
                  "type": "array",
                  "default": [
                    {
                      "command": "node app.js"
                    }
                  ],
                  "items": {
                    "type": "object",
                    "properties": {
                      "command": {
                        "description": "Command to run",
                        "type": "string"
                      },
                      "continue": {
                        "description": "Stops excecution if command fails, otherwise proceeds with next command",
                        "type": "boolean"
                      },
                      "print": {
                        "description": "If set to false the command will not print the full command with arguments to logs.",
                        "type": "boolean",
                        "default": true
                      },
                      "silent": {
                        "description": "If set to false the command will not print output to logs.",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                "context": {
                  "description": "Direktiv will delete the working directory after each execution. With the context the application can run in a different\ndirectory and commands like npm install will be persistent. If context is not set the \"node_module\" directory will be deleted\nand each execution of the flow uses an empty modules folder. Multiple apps can not share a context. \n",
                  "type": "string"
                },
                "files": {
                  "description": "File to create before running commands.",
                  "type": "array",
                  "default": null,
                  "items": {
                    "$ref": "#/definitions/direktivFile"
                  }
                },
                "node": {
                  "description": "Default node version for the script",
                  "type": "string",
                  "default": "18.10.0"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of executed commands.",
            "schema": {
              "type": "object",
              "properties": {
                "node": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "success",
                      "result"
                    ],
                    "properties": {
                      "result": {
                        "additionalProperties": false
                      },
                      "success": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "node": [
                {
                  "result": "Hello World",
                  "success": true
                }
              ]
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Direktiv-ErrorCode": {
                "type": "string"
              },
              "Direktiv-ErrorMessage": {
                "type": "string"
              }
            }
          }
        },
        "x-direktiv": {
          "cmds": [
            {
              "action": "exec",
              "exec": "{{ if .Context }} mkdir -p /context/{{ .Context }} {{ else }} echo -n \"\" {{ end }}",
              "print": false,
              "silent": true
            },
            {
              "action": "exec",
              "exec": "{{ if .Context }} cp -Rf . /context/{{ .Context }} {{ else }} echo -n \"\" {{ end }}",
              "print": false,
              "silent": true
            },
            {
              "action": "foreach",
              "continue": "{{ .Item.Continue }}",
              "exec": "bash -c 'source /usr/local/nvm/nvm.sh \u0026\u0026 nvm use {{ if .Body.Node }} {{ .Body.Node }} {{ else }} 18.10.0 {{ end }} \u003e /dev/null \u0026\u0026 {{ .Item.Command }}'",
              "loop": ".Commands",
              "output": "output.json",
              "print": "{{ .Item.Print }}",
              "silent": "{{ .Item.Silent }}",
              "workingdir": "{{ if .Body.Context }}/context/{{ .Body.Context }}{{ else }}{{ end }}"
            }
          ],
          "output": "{\n  \"node\": {{ index . 2 | toJson }}\n}\n"
        },
        "x-direktiv-errors": {
          "io.direktiv.command.error": "Command execution failed",
          "io.direktiv.output.error": "Template error for output generation of the service",
          "io.direktiv.ri.error": "Can not create information object from request"
        },
        "x-direktiv-examples": [
          {
            "content": "- id: node \n  type: action\n  action:\n    function: node\n    input:\n      files:\n      - name: hello.js\n        data: |\n          console.log(\"Hello World\"); \n      commands:\n      - command: node hello.js",
            "title": "Basic"
          },
          {
            "content": "- id: node \n  type: action\n  action:\n    function: node\n    input:\n      node: \"16\"\n      commands:\n      - command: node -v",
            "title": "Change node version"
          },
          {
            "content": "- id: node \n  type: action\n  action:\n    function: node\n    input: \n      context: uuid-app\n      files: \n      - name: myapp.js\n        data: |\n          const { v4: uuidv4 } = require('uuid');\n          console.log(uuidv4());\n      commands:\n      - command: npm install uuid\n      - command: node myapp.js   ",
            "title": "Using a context"
          },
          {
            "content": "- id: node \n  type: action\n  action:\n    function: node\n    files:\n    - key: out.js\n      scope: workflow\n    input:\n      commands:\n      - command: node out.js      ",
            "title": "Using Direktiv variable as script"
          }
        ],
        "x-direktiv-function": "functions:\n- id: node\n  image: gcr.io/direktiv/functions/node:1.0\n  type: knative-workflow"
      },
      "delete": {
        "parameters": [
          {
            "type": "string",
            "description": "On cancel Direktiv sends a DELETE request to\nthe action with id in the header\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-direktiv": {
          "cancel": "echo 'cancel {{ .DirektivActionID }}'"
        }
      }
    }
  },
  "definitions": {
    "direktivFile": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "github.com/direktiv/apps/go/pkg/apps"
        },
        "type": "DirektivFile"
      }
    },
    "error": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Run node in Direktiv",
    "title": "node",
    "version": "1.0",
    "x-direktiv-meta": {
      "categories": [
        "build",
        "development"
      ],
      "container": "gcr.io/direktiv/functions/node",
      "issues": "https://github.com/direktiv-apps/node/issues",
      "license": "[Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)",
      "long-description": "This function provides a Node.js a s a Direktiv function. Node Version Manager is installed to support LTS versions. The following versions are installed in this function:\n\n- 18.10.0\n\n- 16.17.1\n\nNVM (Node Version Manager) can be used as well to install different versions but it is function wide which means changes are visible to all function calls during the function / container lifetime. If the application is returning plain JSON on standard out it will be used as JSON result in Direktiv. If the application prints other strings to standard out the response will be a plain string. If JSON output is required the application can create and write to a file called output.json. If this file exists, this function uses its contents as return value.\nFunctions can have a context to persist the node_modules directory across different execution cycles. Unlike Direktiv's regular behaviour to have a new working directory for each execution, the context ensures that it runs in the same directory each time. ",
      "maintainer": "[direktiv.io](https://www.direktiv.io) ",
      "url": "https://github.com/direktiv-apps/node"
    }
  },
  "paths": {
    "/": {
      "post": {
        "parameters": [
          {
            "type": "string",
            "default": "development",
            "description": "direktiv action id is an UUID. \nFor development it can be set to 'development'\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          },
          {
            "type": "string",
            "default": "/tmp",
            "description": "direktiv temp dir is the working directory for that request\nFor development it can be set to e.g. '/tmp'\n",
            "name": "Direktiv-TempDir",
            "in": "header"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/postParamsBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of executed commands.",
            "schema": {
              "$ref": "#/definitions/postOKBody"
            },
            "examples": {
              "node": [
                {
                  "result": "Hello World",
                  "success": true
                }
              ]
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Direktiv-ErrorCode": {
                "type": "string"
              },
              "Direktiv-ErrorMessage": {
                "type": "string"
              }
            }
          }
        },
        "x-direktiv": {
          "cmds": [
            {
              "action": "exec",
              "exec": "{{ if .Context }} mkdir -p /context/{{ .Context }} {{ else }} echo -n \"\" {{ end }}",
              "print": false,
              "silent": true
            },
            {
              "action": "exec",
              "exec": "{{ if .Context }} cp -Rf . /context/{{ .Context }} {{ else }} echo -n \"\" {{ end }}",
              "print": false,
              "silent": true
            },
            {
              "action": "foreach",
              "continue": "{{ .Item.Continue }}",
              "exec": "bash -c 'source /usr/local/nvm/nvm.sh \u0026\u0026 nvm use {{ if .Body.Node }} {{ .Body.Node }} {{ else }} 18.10.0 {{ end }} \u003e /dev/null \u0026\u0026 {{ .Item.Command }}'",
              "loop": ".Commands",
              "output": "output.json",
              "print": "{{ .Item.Print }}",
              "silent": "{{ .Item.Silent }}",
              "workingdir": "{{ if .Body.Context }}/context/{{ .Body.Context }}{{ else }}{{ end }}"
            }
          ],
          "output": "{\n  \"node\": {{ index . 2 | toJson }}\n}\n"
        },
        "x-direktiv-errors": {
          "io.direktiv.command.error": "Command execution failed",
          "io.direktiv.output.error": "Template error for output generation of the service",
          "io.direktiv.ri.error": "Can not create information object from request"
        },
        "x-direktiv-examples": [
          {
            "content": "- id: node \n  type: action\n  action:\n    function: node\n    input:\n      files:\n      - name: hello.js\n        data: |\n          console.log(\"Hello World\"); \n      commands:\n      - command: node hello.js",
            "title": "Basic"
          },
          {
            "content": "- id: node \n  type: action\n  action:\n    function: node\n    input:\n      node: \"16\"\n      commands:\n      - command: node -v",
            "title": "Change node version"
          },
          {
            "content": "- id: node \n  type: action\n  action:\n    function: node\n    input: \n      context: uuid-app\n      files: \n      - name: myapp.js\n        data: |\n          const { v4: uuidv4 } = require('uuid');\n          console.log(uuidv4());\n      commands:\n      - command: npm install uuid\n      - command: node myapp.js   ",
            "title": "Using a context"
          },
          {
            "content": "- id: node \n  type: action\n  action:\n    function: node\n    files:\n    - key: out.js\n      scope: workflow\n    input:\n      commands:\n      - command: node out.js      ",
            "title": "Using Direktiv variable as script"
          }
        ],
        "x-direktiv-function": "functions:\n- id: node\n  image: gcr.io/direktiv/functions/node:1.0\n  type: knative-workflow"
      },
      "delete": {
        "parameters": [
          {
            "type": "string",
            "description": "On cancel Direktiv sends a DELETE request to\nthe action with id in the header\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-direktiv": {
          "cancel": "echo 'cancel {{ .DirektivActionID }}'"
        }
      }
    }
  },
  "definitions": {
    "direktivFile": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "github.com/direktiv/apps/go/pkg/apps"
        },
        "type": "DirektivFile"
      }
    },
    "error": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "postOKBody": {
      "type": "object",
      "properties": {
        "node": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/postOKBodyNodeItems"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "postOKBodyNodeItems": {
      "type": "object",
      "required": [
        "success",
        "result"
      ],
      "properties": {
        "result": {
          "additionalProperties": false
        },
        "success": {
          "type": "boolean"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postParamsBody": {
      "type": "object",
      "properties": {
        "commands": {
          "description": "Array of commands.",
          "type": "array",
          "default": [
            {
              "command": "node app.js"
            }
          ],
          "items": {
            "$ref": "#/definitions/postParamsBodyCommandsItems"
          }
        },
        "context": {
          "description": "Direktiv will delete the working directory after each execution. With the context the application can run in a different\ndirectory and commands like npm install will be persistent. If context is not set the \"node_module\" directory will be deleted\nand each execution of the flow uses an empty modules folder. Multiple apps can not share a context. \n",
          "type": "string"
        },
        "files": {
          "description": "File to create before running commands.",
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/definitions/direktivFile"
          }
        },
        "node": {
          "description": "Default node version for the script",
          "type": "string",
          "default": "18.10.0"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postParamsBodyCommandsItems": {
      "type": "object",
      "properties": {
        "command": {
          "description": "Command to run",
          "type": "string"
        },
        "continue": {
          "description": "Stops excecution if command fails, otherwise proceeds with next command",
          "type": "boolean"
        },
        "print": {
          "description": "If set to false the command will not print the full command with arguments to logs.",
          "type": "boolean",
          "default": true
        },
        "silent": {
          "description": "If set to false the command will not print output to logs.",
          "type": "boolean",
          "default": false
        }
      },
      "x-go-gen-location": "operations"
    }
  }
}`))
}
